addEventListener('DOMContentLoaded', () => {
	const getCSRFToken = () => {
		const cookies = document.cookie.split(';')
		for (var i = 0; i < cookies.length; i++) {
			var cookie = cookies[i].trim()
			if (cookie.startsWith('csrftoken=')) {
				return cookie.split('=')[1]
			}
		}
		return null
	}
	const csrfTokenCookie = getCSRFToken()

	let error = 0
	const participantNames = document.querySelectorAll('#participantName')
	const participantSurnames = document.querySelectorAll('#participantSurname')
	const participantEmails = document.querySelectorAll('#participantEmail')
	const participantPhones = document.querySelectorAll('#participantPhone')

	const cartName = document.querySelector('#buyerName')
	const cartSurname = document.querySelector('#buyerSurname')
	const cartEmail = document.querySelector('#buyerEmail')
	const cartPhone = document.querySelector('#buyerPhone')

	const showError = (input, msg) => {
		const formBox = input.parentElement
		const errorMsg = formBox.querySelector('.form__group-paragraph--error')
		console.log(errorMsg);
		formBox.classList.add('error')
		errorMsg.textContent = msg
		error++
		// if (!formBox.classList.contains('error')) {
		// 	slideDown(errorMsg)
		// 	formBox.classList.add('error')
		// }
	}

	const clearError = input => {
		const formBox = input.parentElement
		// const errorToHide = input.nextElementSibling
		formBox.classList.remove('error')
		// slideUp(errorToHide)
	}

	const checkNameForms = input => {
		const regularExpression = /^[A-Za-z]{2,20}$/

		if (regularExpression.test(input.value)) {
			clearError(input)
		} else {
			showError(input, 'Niepoprawne imie')
		}
	}

	const checkSurNameForms = input => {
		const regularExpression = /^[A-Za-z]{2,20}$/

		if (regularExpression.test(input.value)) {
			clearError(input)
		} else {
			showError(input, 'Niepoprawne nazwisko')
		}
	}

	const checkEmail = email => {
		const regularExpression =
			/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9żźćńółęąśŻŹĆĄŚĘŁÓŃ]+\.)+[a-zA-ZżźćńółęąśŻŹĆĄŚĘŁÓŃ]{2,}))$/

		if (regularExpression.test(email.value)) {
			clearError(email)
		} else {
			showError(email, 'Niepoprawny adres e-mail')
		}
	}

	const phoneNumberValidate = phoneNumber => {
		const regularExpression = /(?<!\w)(\(?(\+|00)?48\)?)?[ -]?\d{3}[ -]?\d{3}[ -]?\d{3}(?!\w)/
		if (regularExpression.test(phoneNumber.value)) {
			clearError(phoneNumber)
		} else {
			showError(phoneNumber, `${phoneNumber.placeholder} jest niepoprawny`)
		}
	}

	const checkForm = input => {
		input.forEach(item => {
			if (item.value === '') {
				showError(item, item.placeholder)
			} else {
				clearError(item)
			}
		})
	}

	const checkoutForm = document.querySelector('.jsCreateCheckout')
	if (checkoutForm) {
		for (let i = 0; i < participantNames.length; i++) {
			const name = participantNames[i]
			const surname = participantSurnames[i]
			const email = participantEmails[i]
			const phone = participantPhones[i]

			name.addEventListener('keyup', () => {
				checkNameForms(name)
			})
			surname.addEventListener('keyup', () => {
				checkSurNameForms(surname)
			})
			email.addEventListener('keyup', () => {
				checkEmail(email)
			})
			phone.addEventListener('keyup', () => {
				phoneNumberValidate(phone)
			})
		}

		cartName.addEventListener('keyup', () => {
			checkNameForms(cartName)
		})
		cartSurname.addEventListener('keyup', () => {
			checkSurNameForms(cartSurname)
		})
		cartEmail.addEventListener('keyup', () => {
			checkEmail(cartEmail)
		})
		cartPhone.addEventListener('keyup', () => {
			phoneNumberValidate(cartPhone)
		})

		checkoutForm.addEventListener('submit', e => {
			e.preventDefault()
			// WALIDAJCA
			error = 0

			checkNameForms(cartName)
			checkSurNameForms(cartSurname)
			checkEmail(cartEmail)
			phoneNumberValidate(cartPhone)

			for (let i = 0; i < participantNames.length; i++) {
				const name = participantNames[i]
				const surname = participantSurnames[i]
				const email = participantEmails[i]
				const phone = participantPhones[i]
				checkForm([name, surname, email, phone])
				checkNameForms(name)
				checkSurNameForms(surname)
				checkEmail(email)
				phoneNumberValidate(phone)
			}

			if (error == 0) {
				// Utworzenie obiektu z danymi fromData
				const buyerName = checkoutForm.querySelector('#buyerName').value
				const buyerSurname = checkoutForm.querySelector('#buyerSurname').value
				const buerEmail = checkoutForm.querySelector('#buyerEmail').value
				const buyerPhone = checkoutForm.querySelector('#buyerPhone').value
				const cartCourses = document.querySelectorAll('.jsCartCourse')

				const formData = {
					name: buyerName,
					surname: buyerSurname,
					email: buerEmail,
					phone: buyerPhone,
					purchased_courses: [],
				}
				cartCourses.forEach(course => {
					const courseId = course.dataset.courseId
					const courseQuantity = course.dataset.courseQuantity

					const participantData = course.querySelectorAll('.jsParticipantData')
					const participants = []

					participantData.forEach(participant => {
						const participantName = participant.querySelector('#participantName').value
						const participantSurname = participant.querySelector('#participantSurname').value
						const participantEmail = participant.querySelector('#participantEmail').value
						const participantPhone = participant.querySelector('#participantPhone').value

						const newParticipant = {
							name: participantName,
							surname: participantSurname,
							email: participantEmail,
							phone: participantPhone,
						}

						participants.push(newParticipant)
					})

					const newCourse = {
						course: courseId,
						quantity: parseInt(courseQuantity, 10),
						participants: participants,
					}
					formData.purchased_courses.push(newCourse)
				})

				var stripe = Stripe(
					'pk_test_51O2IdAKiNvxN6rGZ2WJiJgSld6y86ePUmmhIHe3CjSSLTYYuJ7M16NFgByVzI5RhXJ1xdAjtQqeodyJ8NeFulAri00klwONrWu'
				)

				fetch('/create-checkout-session', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': csrfTokenCookie,
					},
					body: JSON.stringify(formData),
				})
					.then(function (response) {
						return response.json()
					})
					.then(function (session) {
						return stripe.redirectToCheckout({ sessionId: session.id })
					})
					.then(function (result) {
						if (result.error) {
							console.error(result.error.message)
						}
					})
			}
		})
	}
})
