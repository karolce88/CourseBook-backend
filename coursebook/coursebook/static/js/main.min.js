addEventListener('DOMContentLoaded', (event) => {
	// WALIDACJA FUNKCJE
	const nameAddInstructor = document.querySelector('#username')
	const surnameAddInstructor = document.querySelector('#users-surname')
	const textAddInstructor = document.querySelector('#text')
	const blogTextTitle = document.querySelector('.jsBlogTitle')
	const blogText = document.querySelector('.jsBlogText')
	const blogTextDescription = document.querySelector('.jsBlogDescription')

	const addCourseQuantityOfSeats = document.querySelector('.jsCourseQuantity')
	const addCoursePrice = document.querySelector('.jsCoursePrice')
	const addCourseCity = document.querySelector('.jsCourseCity')
	const addCourseDate = document.querySelector('.jsCourseDate')
	const addCourseHour = document.querySelector('.jsCourseHour')
	const addCourseProvinces = document.querySelector('.JScourseProvinces')
	const addCourseDescribleInstructor = document.querySelector('.jsCourseInstructor')

	const addCourseTitle = document.querySelector('.jsCourseTitle')
	const addCourseShortDescribe = document.querySelector('.jsCourseShortDescribe')
	const addCourseDescribe = document.querySelector('.jsCourseDescribe')
	const addCourseForWho = document.querySelector('.jsCourseForWho')
	const addCourseBenefits = document.querySelector('.jsCourseBenefits')

	let error = 0

	const showError = (input, msg) => {
		const formBox = input.parentElement
		const errorMsg = formBox.querySelector('.form__group-paragraph--error')
		formBox.classList.add('error')
		errorMsg.textContent = msg
		error++
		// if (!formBox.classList.contains('error')) {
		// 	console.log('dodaje error');
		// 	slideDown(errorMsg)
		// 	formBox.classList.add('error')
		// }
	}

	const checkCityLength = (input, min) => {
		if (input.value.length < min) {
			showError(input, `Podano za mało znaków`)
		}
		if (input.value.length > min) {
			clearError(input)
		}
	}

	const checkLength = (input, min) => {
		if (input.value.length < min) {
			showError(input, `Podano za mało znaków`)
		}
		if (input.value.length > min) {
			clearError(input)
		}
	}

	const checkIsNumber = (input, min) => {
		if (!/^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ-]+$/.test(input.value)) {
			showError(input, `Niepoprawne dane`)
		} else {
			checkCityLength(input, min)
		}
	}

	const isValidPrice = (value) => {
		// const pricePattern = /^(0|[1-9]\d*)([.,]\d+)?$/;
		const pricePattern = /^(0|[1-9]\d*)([.,]\d{2})?$/

		return pricePattern.test(value) || value === '0'
	}

	const checkPrice = (input) => {
		if (isValidPrice(input.value) && input.value > 0) {
			clearError(input)
		} else {
			showError(input, `Podaj poprawną cenę`)
		}
	}

	const checkSeats = (input) => {
		if (
			input.value <= 0 ||
			input.value.charAt(0) == '0' ||
			input.value.charAt(0) == ',' ||
			input.value.charAt(0) == '.'
		) {
			showError(input, `Podaj poprawną wartośc`)
		} else {
			clearError(input)
		}
	}

	const checkTitleLength = (input, min) => {
		if (input.value.length < min) {
			showError(input, `Podaj więcej niż ${min} znaków`)
		}
		if (input.value.length > min) {
			clearError(input)
		}
	}

	const checkTextLength = (input, min) => {
		if (input.value.length < min) {
			showError(input, `Podaj więcej niż ${min} znaków`)
		}
		if (input.value.length > min) {
			clearError(input)
		}
	}

	const clearError = (input) => {
		const formBox = input.parentElement
		// const errorToHide = input.nextElementSibling
		formBox.classList.remove('error')
		// slideUp(errorToHide)
	}

	const checkNameForms = (input) => {
		const regularExpression = /^[A-Za-z]{2,20}$/

		if (regularExpression.test(input.value)) {
			clearError(input)
		} else {
			showError(input, 'Niepoprawne imie')
		}
	}

	const checkSurNameForms = (input) => {
		const regularExpression = /^[A-Za-z]{2,20}$/

		if (regularExpression.test(input.value)) {
			clearError(input)
		} else {
			showError(input, 'Niepoprawne nazwisko')
		}
	}

	const checkForm = (input) => {
		input.forEach((item) => {
			if (item.value === '') {
				showError(item, item.placeholder)
			} else {
				clearError(item)
			}
		})
	}

	const checkForm2 = (item) => {
		if (item.value === '') {
			showError(item, item.placeholder)
		} else {
			clearError(item)
		}
	}

	const checkUsernameContent = () => {
		checkForm2(nameAddInstructor)
		checkNameForms(nameAddInstructor)
		checkLength(nameAddInstructor, 2)
	}

	if (nameAddInstructor) {
		nameAddInstructor.addEventListener('keyup', checkUsernameContent)
	}

	const checkUserSurnameContent = () => {
		checkForm2(surnameAddInstructor)
		checkSurNameForms(surnameAddInstructor)
		checkLength(surnameAddInstructor, 2)
	}

	if (surnameAddInstructor) {
		surnameAddInstructor.addEventListener('keyup', checkUserSurnameContent)
	}

	const checkLengthText = () => {
		checkTextLength(textAddInstructor, 15)
	}

	if (textAddInstructor) {
		textAddInstructor.addEventListener('keyup', checkLengthText)
	}

	const checkBlogTitle = () => {
		checkTitleLength(blogTextTitle, 15)
	}

	if (blogTextTitle) {
		blogTextTitle.addEventListener('keyup', checkBlogTitle)
	}

	const checkBlogTextDescription = () => {
		checkTextLength(blogTextDescription, 15)
	}

	if (blogTextDescription) {
		blogTextDescription.addEventListener('keyup', checkBlogTextDescription)
	}

	const checkBlogText = () => {
		checkTextLength(blogText, 15)
	}

	if (blogText) {
		blogText.addEventListener('keyup', checkBlogText)
	}

	// add courses
	const checkCourseTitle = () => {
		checkTitleLength(addCourseTitle, 15)
	}
	if (addCourseTitle) {
		addCourseTitle.addEventListener('keyup', checkCourseTitle)
	}

	const checkCourseText2 = () => {
		checkTextLength(addCourseShortDescribe, 15)
	}
	if (addCourseShortDescribe) {
		addCourseShortDescribe.addEventListener('keyup', checkCourseText2)
	}

	const checkCourseText3 = () => {
		checkTextLength(addCourseDescribe, 15)
	}
	if (addCourseDescribe) {
		addCourseDescribe.addEventListener('keyup', checkCourseText3)
	}

	const checkCourseText4 = () => {
		checkTextLength(addCourseForWho, 15)
	}
	if (addCourseForWho) {
		addCourseForWho.addEventListener('keyup', checkCourseText4)
	}

	const checkCourseText5 = () => {
		checkTextLength(addCourseBenefits, 15)
	}
	if (addCourseBenefits) {
		addCourseBenefits.addEventListener('keyup', checkCourseText5)
	}

	const checkCourseCity = () => {
		checkCityLength(addCourseCity, 1)
		checkIsNumber(addCourseCity, 1)
	}

	if (addCourseCity) {
		addCourseCity.addEventListener('keyup', checkCourseCity)
	}

	const checkIsCorrectPrice = () => {
		checkPrice(addCoursePrice)
	}

	if (addCoursePrice) {
		addCoursePrice.addEventListener('keyup', checkIsCorrectPrice)
	}

	const checkQuantityIsNumber2 = () => {
		checkSeats(addCourseQuantityOfSeats)
	}

	if (addCourseQuantityOfSeats) {
		addCourseQuantityOfSeats.addEventListener('keyup', checkQuantityIsNumber2)
	}

	const checkCourseDate = (addCourseDate) => {
		if (addCourseDate.value) {
			const dateNow = new Date()
			dateNow.setHours(0, 0, 0, 0)
			const timeStamp = dateNow.getTime()
			const coursePickedDate = new Date(addCourseDate.value)
			coursePickedDate.setHours(0, 0, 0, 0)

			if (coursePickedDate.getTime() < timeStamp) {
				showError(addCourseDate, 'Nie wybrano prawidłowej daty')
			} else {
				clearError(addCourseDate)
			}
		} else {
			showError(addCourseDate, 'Nie wybrano daty')
		}
	}

	if (addCourseDate) {
		addCourseDate.addEventListener('change', () => {
			checkCourseDate(addCourseDate)
		})
		addCourseDate.addEventListener('keyup', () => {
			checkCourseDate(addCourseDate)
		})
	}

	const checkProvinces = (addCourseProvinces) => {
		if (addCourseProvinces.selectedIndex == 0) {
			showError(addCourseProvinces, 'Nie wybrano województwa')
		} else {
			clearError(addCourseProvinces)
		}
	}

	if (addCourseProvinces) {
		addCourseProvinces.addEventListener('change', () => {
			checkProvinces(addCourseProvinces)
		})
	}

	const checkIfIntruto = (addCourseDescribleInstructor) => {
		if (addCourseDescribleInstructor.selectedIndex == 0) {
			showError(addCourseDescribleInstructor, 'Nie wybrano prowadzącego')
		} else {
			clearError(addCourseDescribleInstructor)
		}
	}

	if (addCourseDescribleInstructor) {
		addCourseDescribleInstructor.addEventListener('change', () => {
			checkIfIntruto(addCourseDescribleInstructor)
		})
	}

	const checkCourseTime = (addCourseHour) => {
		if (addCourseHour.value == '') {
			showError(addCourseHour, 'Podaj godzinę')
		} else {
			clearError(addCourseHour)
		}
	}

	if (addCourseHour) {
		addCourseHour.addEventListener('change', () => {
			checkCourseTime(addCourseHour)
		})
	}

	// walidacja inputa w karcie produktu - trochę mi nie wyszła  -----------------------------------------
	let setsValue
	

	let quantityInputOfferCard = document.querySelector('.jsQuantityInputOfferCard')
	if (quantityInputOfferCard) {
		let previousValue = quantityInputOfferCard.value



		// wydrukowanie ilosci dostepnych kursow po kliknieciu w inputa  --- to musi zostać bo to działa poprawnie
		quantityInputOfferCard.addEventListener('click', () => {
			const quantityAlert = document.querySelector('.course__sets-quantity')
			quantityAlert.innerHTML = `Ilość wolnych miejsc: ${setsValue}`
			quantityAlert.classList.contains('course__show')
			quantityAlert.classList.add('course__show')
			document.body.addEventListener('click', (e) => {
				if (!e.target.matches('.jsQuantityInputOfferCard')) {
					quantityAlert.classList.remove('course__show')
				}
			})
		})

		setsValue = quantityInputOfferCard.getAttribute('data-quantity')
		
		quantityInputOfferCard.addEventListener('change', () => {
			checkSeatsOfferCard2(setsValue)
		})


		quantityInputOfferCard.addEventListener('input', () => {
			const currentInputValue = quantityInputOfferCard.value
			if (/^\d*$/.test(currentInputValue) && currentInputValue > 0 && currentInputValue <= setsValue) {
				previousValue = currentInputValue
			} else if (currentInputValue > setsValue) {
				quantityInputOfferCard.value = previousValue
				previousValue = previousValue
			} else {
				quantityInputOfferCard.value = setsValue
			}
		})
	}

	let valueOfSets = setsValue

	const checkSeatsOfferCard2 = (input, realValuee) => {
		const errorElement = document.querySelector('.error-valid')
		// let inputInt = parseInt(input, 10)
		let inputIn = input
		let inputInt = parseInt(inputIn, 10)
		let realVal = realValuee.value
		console.log(realVal);
		let realValue = parseInt(realVal, 10)
		// console.log(inputInt);
		console.log(realValue);

		if (realValue <= 0 || inputInt < realValue) {
			errorElement.classList.add('error-valid-show')
		} else {
			errorElement.classList.remove('error-valid-show')
		}
	}

	const realValue = quantityInputOfferCard
	if (valueOfSets) {
		checkSeatsOfferCard2(valueOfSets, realValue)
	}
	
	// koniec walidacji -----------------------------------------------------------------------------

	const createAlert = (message) => {
		const body = document.querySelector('body')
		const alert = document.createElement('div')
		alert.classList.add('alert', 'alert--success')
		alert.innerHTML = `
		<svg
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		fill="none"
		stroke="#47d762"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
		class="feather feather-check-circle"
	  >
		<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
		<polyline points="22 4 12 14.01 9 11.01"></polyline>
	  </svg>
	  ${message}
		`

		body.appendChild(alert)
	}

	//
	const URL = window.location.origin
	let isEdit = false
	const alerts = document.querySelectorAll('.alert')
	if (alerts) {
		alerts.forEach((alert) => {
			const deley = setTimeout(() => {
				alert.classList.add('alert__hide')
			}, 2000)
		})
	}

	const backdropActivate = (overlay) => {
		overlay.classList.add('overlay--active')
		document.body.classList.add('no-scroll')
	}

	const backdropDeActivate = (overlay) => {
		overlay.classList.remove('overlay--active')
		document.body.classList.remove('no-scroll')
	}

	const drawer = document.querySelector('.drawer')
	if (drawer) {
		const overlay = document.querySelector('.overlay')
		const accountAddBtn = document.querySelector('.jsAccountAdd')
		const drawerBackBtn = drawer.querySelector('.drawer__back')

		accountAddBtn.addEventListener('click', () => {
			drawer.classList.add('drawer--active')
			backdropActivate(overlay)
			if (instructorForm) {
				handleClearForm(instructorForm)
			} else if (blogPostForm) {
				handleClearForm(blogPostForm)
			} else {
				handleClearForm(courseForm)
			}
			isEdit = false
		})

		drawerBackBtn.addEventListener('click', () => {
			drawer.classList.remove('drawer--active')
			backdropDeActivate(overlay)
		})
	}

	const handleShadowNavigation = () => {
		if (window.scrollY > 148) {
			navigationElement.classList.add('nav--shadow')
		} else {
			navigationElement.classList.remove('nav--shadow')
		}
	}

	const navigationElement = document.querySelector('.nav')
	if (navigationElement) {
		window.addEventListener('scroll', handleShadowNavigation)
	}

	//
	const handleFillFromInputs = (form, data) => {
		Object.entries(data).forEach(([key, value]) => {
			let counter = 0
			const inputElement = form.querySelector(`[name='${key}']`)
			if (inputElement) {
				if (inputElement.tagName.toLowerCase() === 'select') {
					const niceSelect = inputElement.nextElementSibling
					const current = niceSelect.querySelector('.current')
					const listOptions = niceSelect.querySelectorAll('.option')
					const options = Array.from(inputElement.options)
					options.forEach((option, index) => {
						if (option.value == value) {
							listOptions[0].classList.remove('selected')
							listOptions[index].classList.add('selected')
							current.textContent = option.dataset.name
							option.selected = true
							// console.log(inputElement.selectedIndex)

							inputElement.addEventListener('change', (e) => {
								if (counter == 0) {
									listOptions[index].classList.remove('selected')
									counter++
								}
							})
						}
					})
				} else if (inputElement.type === 'checkbox') {
					inputElement.checked = value
				} else {
					inputElement.value = value
				}
			} else {
				console.log(`Brak pola formularza o nazwie '${key}'`)
			}
		})
	}
	//
	// Tworzenie wpisu

	//   tworzenie kursu
	///////////////////////////////////////////
	const courseForm = document.querySelector('.jsCourseForm')
	if (courseForm) {
		courseForm.addEventListener('submit', (e) => {
			e.preventDefault()
			error = 0
			checkTitleLength(addCourseTitle, 15)
			checkTextLength(addCourseShortDescribe, 15)
			checkTextLength(addCourseDescribe, 15)
			checkTextLength(addCourseForWho, 15)
			checkTextLength(addCourseBenefits, 15)
			checkIsNumber(addCourseCity, 1)
			checkCityLength(addCourseCity, 1)
			checkPrice(addCoursePrice)
			checkSeats(addCourseQuantityOfSeats)
			// checkQuantityIsNumber(addCourseQuantityOfSeats)
			checkCourseDate(addCourseDate)
			checkProvinces(addCourseProvinces)
			checkIfIntruto(addCourseDescribleInstructor)
			checkCourseTime(addCourseHour)

			if (error == 0) {
				const formData = new FormData(courseForm)
				const csrfToken = formData.get('csrfmiddlewaretoken')
				const fileInputs = courseForm.querySelectorAll('input[type="file"]')
				fileInputs.forEach((input) => {
					const files = input.files
					for (let i = 0; i < files.length; i++) {
						const file = files[i]
						formData.append('uploaded_images', file)
					}
				})

				fetch(isEdit ? '/edit-course/' + courseId : '/account-courses', {
					method: isEdit ? 'PUT' : 'POST',
					headers: {
						'X-CSRFToken': csrfToken,
					},
					body: formData,
				})
					.then((response) => {
						courseForm.reset()
						if (response.ok) {
							location.reload()
						} else {
							location.reload()
						}
					})
					.catch((error) => {
						console.log(error)
					})
			}

			// fetch('/account-courses', {
			// 	method: 'POST',
			// 	headers: {
			// 		'X-CSRFToken': csrfToken,
			// 	},
			// 	body: formData,
			// })
			// 	.then(response => {
			// 		console.log(response)
			// 		if (response.ok) {
			// 			location.reload()
			// 		} else {
			// 			location.reload()
			// 		}
			// 	})
			// 	.catch(error => {
			// 		console.log(error)
			// 	})
		})
	}

	const courseEditBtns = document.querySelectorAll('.jsCourseEdit')
	courseEditBtns.forEach((btn) => {
		btn.addEventListener('click', (e) => {
			handleClearForm(courseForm)
			isEdit = true
			courseId = btn.dataset.id
			fetch('/edit-course/' + courseId, {
				method: 'GET',
			})
				.then((response) => response.json())
				.then((data) => {
					// console.log(data)
					const overlay = document.querySelector('.overlay')
					backdropActivate(overlay)
					drawer.classList.add('drawer--active')
					handleFillFromInputs(courseForm, data)
					if (data.images) {
						const imageElements = document.querySelector('.form__images').querySelectorAll('.form__images-image')
						if (imageElements) {
							for (let i = 0; i < data.images.length; i++) {
								imageElements[i].remove()
							}
						}
						data.images.reverse().forEach((image) => {
							handleCreatePhoto(image.image)
						})

						const deleteElements = document.querySelectorAll('.form__images-delete')
						deleteElements.forEach((el) => {
							el.addEventListener('click', (e) => {
								const elementToDelete = e.target.closest('.form__images-image')
								elementToDelete.remove()
								handleCreateInputFile('image')
							})
						})
					}
				})
		})
	})
	const blogPostForm = document.querySelector('.jsPostForm')
	const deletePostForms = document.querySelectorAll('.jsRemovePost')
	if (deletePostForms) {
		deletePostForms.forEach((form) => {
			form.addEventListener('submit', (e) => {
				e.preventDefault()
				const formData = new FormData(form)
				const csrfToken = formData.get('csrfmiddlewaretoken')
				fetch(form.action, {
					method: 'DELETE',
					headers: {
						'X-CSRFToken': csrfToken,
					},
				})
					.then((response) => {
						if (response.ok) {
							location.reload()
						} else {
							location.reload()
						}
					})
					.catch((error) => {
						console.log(error)
					})
			})
		})
	}

	// edycja instruktora
	//   //////////////////////////////
	const instructorForm = document.querySelector('.jsInstructorForm')
	const handleImageNameDisplay = (params) => {
		const formImages = document.querySelectorAll('.form__images-image')
		if (formImages) {
			formImages.forEach((image) => {
				image.addEventListener('change', (e) => {
					const input = image.querySelector('input')
					const fileNameSpan = image.querySelector('span')
					if (input.files.length > 0) {
						fileNameSpan.textContent = `${input.files[0].name}`
					} else {
						fileNameSpan.textContent = 'Wybierz zdjęcie'
					}
				})
			})
		}
	}

	const handleClearForm = (form) => {
		form.reset()
		const formImages = form.querySelectorAll('.form__images-image')
		formImages.forEach((el) => {
			if (el.tagName.toLowerCase() === 'div') {
				el.remove()
				handleCreateInputFile()
			}
		})
	}

	const handleCreatePhoto = (imageUrl) => {
		const imagesContainer = document.querySelector('.form__images')

		const imageContainer = document.createElement('div')
		const deleteElement = document.createElement('div')
		const imageElement = document.createElement('img')
		imageContainer.classList.add('form__images-image')
		deleteElement.classList.add('form__images-delete')
		deleteElement.innerHTML = `
				<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
				fill="none" stroke="white" stroke-width="2" stroke-linecap="round"
				stroke-linejoin="round" class="feather feather-x">
				<line x1="18" y1="6" x2="6" y2="18"></line>
				<line x1="6" y1="6" x2="18" y2="18"></line>
				</svg>
			`
		imageElement.width = 150
		imageElement.height = 150
		imageElement.loading = 'lazy'
		imageElement.src = imageUrl

		const photoChangeInput = document.createElement('input')
		photoChangeInput.type = 'hidden'
		photoChangeInput.name = 'photo_change'
		// console.log(URL)
		// console.log(imageUrl)
		const resourcePath = imageUrl.replace(URL, '')
		photoChangeInput.value = resourcePath

		// const paresdUrl = new URL(imageUrl)
		// photoChangeInput.value = paresdUrl.pathname

		imagesContainer.insertBefore(imageContainer, imagesContainer.firstChild)
		imageContainer.appendChild(deleteElement)
		imageContainer.appendChild(imageElement)
		imageContainer.appendChild(photoChangeInput)
	}

	const handleCreateInputFile = (type) => {
		const imagesContainer = document.querySelector('.form__images')
		const imageContainer = document.createElement('label')
		const imagePlaceholder = document.createElement('span')
		const imageInput = document.createElement('input')
		imageContainer.classList.add('form__images-image')
		imagePlaceholder.textContent = 'Wybierz zdjęcie'
		imageInput.type = 'file'
		imageInput.name = type

		imagesContainer.appendChild(imageContainer)
		imageContainer.appendChild(imagePlaceholder)
		imageContainer.appendChild(imageInput)
		handleImageNameDisplay()
	}

	handleImageNameDisplay()

	const instructorEditBtns = document.querySelectorAll('.jsInstructorEdit')
	instructorEditBtns.forEach((btn) => {
		btn.addEventListener('click', (e) => {
			handleClearForm(instructorForm)
			isEdit = true
			instructorId = btn.dataset.id
			fetch('/edit-instructor/' + instructorId, {
				method: 'GET',
			})
				.then((response) => response.json())
				.then((data) => {
					const overlay = document.querySelector('.overlay')
					backdropActivate(overlay)
					drawer.classList.add('drawer--active')
					instructorForm.querySelector("[name='first_name']").value = data.first_name
					instructorForm.querySelector("[name='last_name']").value = data.last_name
					instructorForm.querySelector("[name='description']").value = data.description
					if (data.photo) {
						const imageElements = document.querySelector('.form__images').querySelectorAll('.form__images-image')
						imageElements[0].remove()
						handleCreatePhoto(data.photo)

						const deleteElements = document.querySelectorAll('.form__images-delete')
						deleteElements.forEach((el) => {
							el.addEventListener('click', (e) => {
								const elementToDelete = e.target.closest('.form__images-image')
								elementToDelete.remove()
								handleCreateInputFile('photo')
							})
						})
					}
				})
		})
	})

	if (instructorForm) {
		instructorForm.addEventListener('submit', (e) => {
			e.preventDefault()
			const formData = new FormData(instructorForm)
			const csrfToken = formData.get('csrfmiddlewaretoken')

			error = 0
			checkForm([nameAddInstructor, surnameAddInstructor])
			checkNameForms(nameAddInstructor)
			checkSurNameForms(surnameAddInstructor)
			// checkLength(nameAddInstructor, 2)
			// checkLength(surnameAddInstructor, 2)
			checkTextLength(nameAddInstructor, 2)
			checkTextLength(surnameAddInstructor, 2)
			checkTextLength(textAddInstructor, 15)

			if (error == 0) {
				fetch(isEdit ? '/edit-instructor/' + instructorId : '/account-instructors', {
					method: isEdit ? 'PUT' : 'POST',
					headers: {
						'X-CSRFToken': csrfToken,
					},
					body: formData,
				})
					.then((response) => {
						instructorForm.reset()
						if (response.ok) {
							location.reload()
						} else {
							location.reload()
						}
					})
					.catch((error) => {
						console.log(error)
					})
			}
		})
	}

	if (blogPostForm) {
		blogPostForm.addEventListener('submit', (e) => {
			e.preventDefault()
			error = 0
			checkTitleLength(blogTextTitle, 15)
			checkTextLength(blogTextDescription, 15)
			checkTextLength(blogText, 15)

			if (error == 0) {
				const formData = new FormData(blogPostForm)
				const csrfToken = formData.get('csrfmiddlewaretoken')
				fetch(isEdit ? '/account-blog/' + blogPostId : '/account-blog', {
					method: isEdit ? 'PUT' : 'POST',
					headers: {
						'X-CSRFToken': csrfToken,
					},
					body: formData,
				})
					.then((response) => {
						blogPostForm.reset()
						if (response.ok) {
							location.reload()
						} else {
							location.reload()
						}
					})
					.catch((error) => {
						console.log(error)
					})
			}
		})
	}

	const setCheckedInput = (data, form) => {
		if (data.categories.length > 0) {
			data.categories.forEach((category) => {
				const inputToCheck = form.querySelector(`#category_${category.id}`)
				if (inputToCheck) {
					inputToCheck.checked = true
				}
			})
		}
	}

	const blogPostEditBtns = document.querySelectorAll('.jsPostEdit')
	blogPostEditBtns.forEach((btn) => {
		btn.addEventListener('click', (e) => {
			handleClearForm(blogPostForm)
			isEdit = true
			blogPostId = btn.dataset.id
			fetch('/account-blog/' + blogPostId, {
				method: 'GET',
			})
				.then((response) => response.json())
				.then((data) => {
					setCheckedInput(data, blogPostForm)
					const overlay = document.querySelector('.overlay')
					backdropActivate(overlay)
					drawer.classList.add('drawer--active')
					blogPostForm.querySelector("[name='title']").value = data.title
					blogPostForm.querySelector("[name='short_content']").value = data.short_content
					blogPostForm.querySelector("[name='content']").value = data.content
					if (data.photo) {
						const imageElements = document.querySelector('.form__images').querySelectorAll('.form__images-image')
						imageElements[0].remove()
						handleCreatePhoto(data.photo)

						const deleteElements = document.querySelectorAll('.form__images-delete')
						deleteElements.forEach((el) => {
							el.addEventListener('click', (e) => {
								const elementToDelete = e.target.closest('.form__images-image')
								elementToDelete.remove()
								handleCreateInputFile('photo')
							})
						})
					}
				})
		})
	})

	const showCartIcon = document.querySelector('.nav__right-basket')
	const drawerCart = document.querySelector('.nav__cart')
	const overlay = document.querySelector('.overlay')

	const showCart = () => {
		drawerCart.classList.add('nav__cart-showcart')
		backdropActivate(overlay)
	}

	const closeCart = () => {
		const closeCartIcon = document.querySelector('.nav__cart-head-closebtn')
		closeCartIcon.addEventListener('click', () => {
			drawerCart.classList.remove('nav__cart-showcart')
			backdropDeActivate(overlay)
		})
	}

	if (showCartIcon) {
		showCartIcon.addEventListener('click', () => {
			showCart()
			closeCart()
		})
	}

	const overlayElement = document.querySelectorAll('.overlay ')
	overlayElement.forEach((over) =>
		over.addEventListener('click', () => {
			drawerCart.classList.remove('nav__cart-showcart')
			backdropDeActivate(overlay)
			if (drawer) {
				drawer.classList.remove('drawer--active')
			}
			backdropDeActivate(overlay)
		})
	)

	const getCSRFToken = () => {
		const cookies = document.cookie.split(';')
		for (var i = 0; i < cookies.length; i++) {
			var cookie = cookies[i].trim()
			if (cookie.startsWith('csrftoken=')) {
				return cookie.split('=')[1]
			}
		}
		return null // Token CSRF nie znaleziony
	}
	const csrfTokenCookie = getCSRFToken()
	// ---------------------------------------------------------------------------------------------------

	const handleDeleteFormCart = () => {
		const deleteCartItemForms = document.querySelectorAll('.jsDeleteCartItem')
		if (deleteCartItemForms) {
			deleteCartItemForms.forEach((form) => {
				form.addEventListener('submit', (e) => {
					e.preventDefault()
					fetch(form.action, {
						method: 'DELETE',
						headers: {
							'X-CSRFToken': csrfTokenCookie,
						},
					}).then((response) => {
						if (response.ok) {
							response.json().then((data) => {
								createMiniCart(data)
								totalPriceCart(data)
								handleDeleteFormCart()
								handleQuantity(data)
							})
						}
					})
				})
			})
		}
	}

	
	const hanldeAddToCart = (params) => {
		const addToCartElement = document.querySelector('.jsAddToCart')

		if (valueOfSets || realValue) {
			checkSeatsOfferCard2(valueOfSets, realValue)
		}

		if (addToCartElement) {
			addToCartElement.addEventListener('submit', (e) => {
				e.preventDefault()
				const formData = new FormData(addToCartElement)
				const csrfToken = formData.get('csrfmiddlewaretoken')
				fetch(addToCartElement.action, {
					method: 'POST',
					headers: {
						'X-CSRFToken': csrfToken,
					},
					body: formData,
				}).then((response) => {
					if (response.ok) {
						// console.log(response)
						getMiniCartData()
						showCart()
						closeCart()
						// response.json().then((data) => {
						// 	createMiniCart(data)
						// })
					}
				})
			})
		}
	}



	const updateQuantity = (form) => {
		const formData = new FormData(form)
		fetch(form.action, {
			method: 'PATCH',
			headers: {
				'X-CSRFToken': csrfTokenCookie,
			},
			body: formData,
		}).then((response) => {
			if (response.ok) {
				response.json().then((data) => {
					createMiniCart(data)
					totalPriceCart(data)
					handleDeleteFormCart()
					handleQuantity()
				})
			}
		})
	}

	const addQuantityToForm = (form) => {
		const cartInputPlus = form.querySelector('.nav__cart-container-boxes-box-price-form-plus')
		const cartInputMinus = form.querySelector('.nav__cart-container-boxes-box-price-form-minus')
		let cartInputValue = form.querySelector('#jsCartInput')

		let previousValue = cartInputValue.value
		let maxSets = parseInt(cartInputValue.dataset.maxQty)

		cartInputValue.addEventListener('input', () => {
			const currentInputValue = cartInputValue.value
			if (/^\d*$/.test(currentInputValue) && currentInputValue > 0 && currentInputValue <= maxSets) {
				previousValue = currentInputValue
				updateQuantity(form)
			} else {
				cartInputValue.value = previousValue
			}
		})

		cartInputPlus.addEventListener('click', () => {
			let quantityOfOrder = cartInputValue.getAttribute('data-max-qty')
			quantityOfOrder -= 1

			if (cartInputValue.value <= quantityOfOrder) {
				cartInputValue.value++
				updateQuantity(form)
			}
		})

		cartInputMinus.addEventListener('click', () => {
			if (cartInputValue.value >= 2) {
				cartInputValue.value--
				updateQuantity(form)
			}
		})
	}

	const handleQuantity = (params) => {
		const quantityForms = document.querySelectorAll('.jsQuantity')
		if (quantityForms) {
			quantityForms.forEach((form) => {
				addQuantityToForm(form)
			})
		}
	}

	const getInstructorFullName = (payload) => {
		return `${payload.first_name} ${payload.last_name}`
	}

	const createMiniCart = (payload) => {
		const cartElement = document.querySelector('.jsCartBody')
		const navCartContainer = document.querySelector('.nav__cart-container')
		const cartFooterElement = document.querySelector('.nav__cart-container-footer')

		if (cartElement) {
			cartElement.innerHTML = ''
			const cartItems = payload.items

			if (cartItems.length > 0) {
				navCartContainer.classList.remove('nav__cart-container--empty')
				const jsAddGoToCheckoutBtn = document.querySelector('.jsAddGoToCheckoutBtn')
				jsAddGoToCheckoutBtn.innerHTML = `
				<div class="nav__cart-container-footer-line"></div>
        		<div class="nav__cart-container-footer-sum">
            <p class="nav__cart-container-footer-sum-text">Wartość koszyka</p>
            <p class="nav__cart-container-footer-sum-text-price"><span class="jsSumPrice">0,00</span> zł</p>
        		</div>
        		<a title="Poznaj oferte" href="${URL}/cart" class="btn btn--primary nav__cart-container-footer-btn">Do kasy
            <span class="btn__arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 20L10.575 18.6L16.175 13H4V11H16.175L10.575 5.4L12 4L20 12L12 20Z" fill="white" />
                </svg>
            </span>
        		</a>`

				// orderQuantityAndType(cartItems);

				cartItems.forEach((cartItem) => {
					const cartItemElement = document.createElement('div')
					const instructorFullName = getInstructorFullName(cartItem.instructor)

					let imageURL = ''
					if (cartItem.images && cartItem.images.image !== null) {
						imageURL = cartItem.images.image
					} else {
						imageURL = `https://placehold.co/115x112?text=${cartItem.course.title}`
					}
					cartItemElement.classList.add('nav__cart-container-boxes-box')
					cartItemElement.innerHTML = `
					<img class="nav__cart-container-boxes-box-img" src="${imageURL}">
					<div class="nav__cart-container-boxes-box-content">
						<p class="nav__cart-container-boxes-box-content-title">${cartItem.course.title}</p>
						<div>
							<div class="nav__cart-container-boxes-box-content-data">
								<svg class="nav__cart-container-boxes-box-content-svgicon" xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
									<path d="M8.48734 9.654L9.304 8.82275L7.58317 7.10192V4.6665H6.4165V7.58317L8.48734 9.654ZM6.4165 3.49984H7.58317V2.33317H6.4165V3.49984ZM10.4998 7.58317H11.6665V6.4165H10.4998V7.58317ZM6.4165 11.6665H7.58317V10.4998H6.4165V11.6665ZM2.33317 7.58317H3.49984V6.4165H2.33317V7.58317ZM6.99984 12.8332C6.19289 12.8332 5.43456 12.6799 4.72484 12.3735C4.01512 12.0671 3.39775 11.6515 2.87275 11.1269C2.34775 10.6019 1.93223 9.98456 1.62617 9.27484C1.32012 8.56511 1.16689 7.80678 1.1665 6.99984C1.1665 6.19289 1.31973 5.43456 1.62617 4.72484C1.93262 4.01512 2.34814 3.39775 2.87275 2.87275C3.39775 2.34775 4.01512 1.93223 4.72484 1.62617C5.43456 1.32012 6.19289 1.16689 6.99984 1.1665C7.80678 1.1665 8.56511 1.31973 9.27484 1.62617C9.98456 1.93262 10.6019 2.34814 11.1269 2.87275C11.6519 3.39775 12.0676 4.01512 12.3741 4.72484C12.6805 5.43456 12.8336 6.19289 12.8332 6.99984C12.8332 7.80678 12.6799 8.56511 12.3735 9.27484C12.0671 9.98456 11.6515 10.6019 11.1269 11.1269C10.6019 11.6519 9.98456 12.0676 9.27484 12.3741C8.56511 12.6805 7.80678 12.8336 6.99984 12.8332Z" fill="#FF7700"/>
									</svg>
								<p>${cartItem.course.date}</p>
							</div>
							<div class="nav__cart-container-boxes-box-content-data">
								<svg class="nav__cart-container-boxes-box-content-svgicon" xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
									<path d="M7.00016 6.99984C7.321 6.99984 7.59575 6.8855 7.82441 6.65684C8.05308 6.42817 8.16722 6.15361 8.16683 5.83317C8.16683 5.51234 8.0525 5.23759 7.82383 5.00892C7.59516 4.78025 7.32061 4.66611 7.00016 4.6665C6.67933 4.6665 6.40458 4.78084 6.17591 5.0095C5.94725 5.23817 5.83311 5.51273 5.8335 5.83317C5.8335 6.154 5.94783 6.42875 6.1765 6.65742C6.40516 6.88609 6.67972 7.00023 7.00016 6.99984ZM7.00016 12.8332C5.43488 11.5012 4.26588 10.2642 3.49316 9.122C2.72044 7.97984 2.33388 6.92245 2.3335 5.94984C2.3335 4.4915 2.80269 3.3297 3.74108 2.46442C4.67947 1.59914 5.76583 1.1665 7.00016 1.1665C8.23488 1.1665 9.32144 1.59914 10.2598 2.46442C11.1982 3.3297 11.6672 4.4915 11.6668 5.94984C11.6668 6.92206 11.2803 7.97945 10.5072 9.122C9.73405 10.2646 8.56505 11.5016 7.00016 12.8332Z" fill="#FF7700"/>
									</svg>
								<p>${cartItem.course.city}</p>
							</div>
							<div class="nav__cart-container-boxes-box-content-data">
								<svg class="nav__cart-container-boxes-box-content-svgicon" xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
									<path d="M7.00016 7.00016C6.3585 7.00016 5.80919 6.77169 5.35225 6.31475C4.8953 5.8578 4.66683 5.3085 4.66683 4.66683C4.66683 4.02516 4.8953 3.47586 5.35225 3.01891C5.80919 2.56197 6.3585 2.3335 7.00016 2.3335C7.64183 2.3335 8.19114 2.56197 8.64808 3.01891C9.10502 3.47586 9.3335 4.02516 9.3335 4.66683C9.3335 5.3085 9.10502 5.8578 8.64808 6.31475C8.19114 6.77169 7.64183 7.00016 7.00016 7.00016ZM2.3335 11.6668V10.0335C2.3335 9.70294 2.41866 9.39902 2.589 9.12175C2.75933 8.84447 2.98527 8.63311 3.26683 8.48766C3.86961 8.18627 4.48211 7.96013 5.10433 7.80925C5.72655 7.65836 6.3585 7.58311 7.00016 7.5835C7.64183 7.5835 8.27377 7.65894 8.896 7.80983C9.51822 7.96072 10.1307 8.18666 10.7335 8.48766C11.0154 8.6335 11.2416 8.84505 11.4119 9.12233C11.5822 9.39961 11.6672 9.70333 11.6668 10.0335V11.6668H2.3335Z" fill="#FF7700"/>
									</svg>
								<p>${instructorFullName}</p>
							</div>
						</div>
					</div>
					<div class="nav__cart-container-boxes-box-price">
	
	
					<form class="jsDeleteCartItem" method="DELETE" action="${URL}/cart/remove/${cartItem.cartItemId}/">
					<button  class="nav__cart-container-boxes-box-price-delete">Usuń produkt</button>
					</form>
				
	
	
					<p class="nav__cart-container-boxes-box-price-sum">
						<span class="nav__cart-container-boxes-box-price-sum-item">${cartItem.course.price} /</span><span> 1szt.</span>
					</p>
					
	
	
					<form class="jsQuantity" method="PATCH" action="${URL}/cart/increase-quantity/${cartItem.cartItemId}">
						<div class="nav__cart-container-boxes-box-price-form">
							<div class="nav__cart-container-boxes-box-price-form-minus">
								<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
								<path d="M14.25 9.74854H3.75V8.24854H14.25V9.74854Z" fill="#12263A"/>
								</svg>
							</div>
	
							<input id="jsCartInput" data-max-qty="${cartItem.course.seats}" name="quantity" type="text" value="${cartItem.quantity}" class="nav__cart-container-boxes-box-price-form-input">
	
							<div class="nav__cart-container-boxes-box-price-form-plus">
								<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
								<path d="M14.25 9.74854H9.75V14.2485H8.25V9.74854H3.75V8.24854H8.25V3.74854H9.75V8.24854H14.25V9.74854Z" fill="#12263A"/>
								</svg>
							</div>
						</div>
					</form>
				</div>
					`
					cartElement.appendChild(cartItemElement)
				})
				cartIconNumberOfOrders(cartItems.length)
				// createOrderObjectToCheckout()
			} else {
				cartFooterElement.innerHTML = ''
				navCartContainer.classList.add('nav__cart-container--empty')

				cartElement.innerHTML = `<div class="nav__cart-container-boxes-empty-cart">

				<svg width="80" height="80" viewBox="0 0 118 118" fill="none"
					 xmlns="http://www.w3.org/2000/svg">
					 <path
						  d="M117.438 111.438L6.56167 0.561523L0 7.12319L22.6817 29.8049L34.1 53.8815L27.125 66.5399C26.2983 67.9865 25.8333 69.6915 25.8333 71.4999C25.8333 74.2404 26.922 76.8687 28.8599 78.8066C30.7978 80.7445 33.4261 81.8332 36.1667 81.8332H74.71L81.84 88.9632C79.2567 90.8232 77.5 93.8715 77.5 97.3332C77.5 100.074 78.5887 102.702 80.5266 104.64C82.4644 106.578 85.0928 107.667 87.8333 107.667C91.295 107.667 94.3433 105.962 96.2033 103.327L110.877 118L117.438 111.438ZM38.3367 71.4999C37.9941 71.4999 37.6656 71.3638 37.4233 71.1215C37.1811 70.8793 37.045 70.5508 37.045 70.2082L37.2 69.5882L41.85 61.1665H54.0433L64.3767 71.4999H38.3367ZM80.3417 61.1665C84.2167 61.1665 87.6267 59.0482 89.3833 55.8449L107.88 22.4165C108.293 21.5899 108.5 20.7115 108.5 19.8332C108.5 18.4629 107.956 17.1487 106.987 16.1798C106.018 15.2109 104.704 14.6665 103.333 14.6665H33.79L80.3417 61.1665ZM36.1667 86.9999C33.4261 86.9999 30.7978 88.0885 28.8599 90.0264C26.922 91.9643 25.8333 94.5926 25.8333 97.3332C25.8333 100.074 26.922 102.702 28.8599 104.64C30.7978 106.578 33.4261 107.667 36.1667 107.667C38.9072 107.667 41.5356 106.578 43.4734 104.64C45.4113 102.702 46.5 100.074 46.5 97.3332C46.5 94.5926 45.4113 91.9643 43.4734 90.0264C41.5356 88.0885 38.9072 86.9999 36.1667 86.9999Z"
						  fill="#FFAD66" />
				</svg>

				<p class="nav__cart-container-boxes-empty-cart-text">Koszyk jest pusty</p>

				<a title="Do sklepu" href="${URL}"
					 class="btn btn--primary nav__cart-container-footer-btn">Do sklepu
					 <span class="btn__arrow">
						  <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
								xmlns="http://www.w3.org/2000/svg">
								<path d="M12 20L10.575 18.6L16.175 13H4V11H16.175L10.575 5.4L12 4L20 12L12 20Z"
									 fill="white" />
						  </svg>
					 </span>
				</a>
		  </div>`
				cartIconNumberOfOrders(cartItems.length)
			}
		}
	}

	const totalPriceCart = (data) => {
		const sumOfPriceCromCart = document.querySelector('.jsSumPrice')
		if (sumOfPriceCromCart) {
			sumOfPriceCromCart.innerHTML = data.total_price
		}
	}

	const cartIconNumberOfOrders = (data) => {
		const ordersCount = parseInt(data)
		const dot = document.querySelector('.nav__right-cart-icon')
		if (dot) {
			if (ordersCount == 0) {
				dot.classList.remove('nav__right-cart-icon-show')
			} else if (ordersCount >= 1) {
				dot.classList.add('nav__right-cart-icon-show')
				// console.log(ordersCount)
				dot.innerHTML = `<p class="nav__right-cart-icon-number">${ordersCount}</p>`
			}
		}
	}

	const getMiniCartData = () => {
		fetch(`${URL}/mini-cart`, {
			method: 'GET',
			headers: {
				'X-CSRFToken': csrfTokenCookie,
			},
		}).then((response) => {
			if (response.ok) {
				response.json().then((data) => {
					createMiniCart(data)
					totalPriceCart(data)
					// cartIconNumberOfOrders(data)
					handleQuantity()
					handleDeleteFormCart()
				})
			}
		})
	}

	hanldeAddToCart()

	const checkIsSession = () => {
		return document.cookie.includes('is_logged')
	}

	if (checkIsSession()) {
		getMiniCartData()
	}

	const checkCanAddToCart = () => {
		if (!checkIsSession()) {
			const htmlElement = document.querySelector('.course__elements')
			if (htmlElement) {
				htmlElement.innerHTML = ''
				const element = document.createElement('div')
				element.classList.add('dodajKlase')
				const link = document.createElement('a')
				link.classList.add('add-course')
				link.href = `${URL}/login`
				link.textContent = 'Zaloguj się'
				element.innerHTML = `Aby dodać do koszyka musisz się zalogować <br/>`
				element.appendChild(link)
				htmlElement.appendChild(element)
			}
		}
	}
	checkCanAddToCart()

	// Karty/slider strona glowna

	let doneAllLabels = false

	const allOfferElements = (provincesElements) => {
		const jsAllCourses = document.querySelector('.jsAllCourses')
		jsAllCourses.addEventListener('click', () => {
			// console.log(provincesElements);
			const mainOfferCard = document.querySelector('.jsAddOffer')
			mainOfferCard.innerHTML = ''
			getProvinceCourses(provincesElements)
		})
	}

	const checkAlllabels = () => {
		if (!doneAllLabels) {
			const labelElementAll = document.createElement('li')
			labelElementAll.classList.add(
				'splide__slide',
				'offert__nav',
				'jsLabel',
				'offert__jsLabel',
				'jsAllCourses',
				'jsSplideLabelBgc'
			)
			labelElementAll.innerHTML = 'Wszystkie'
			provinceLabel.append(labelElementAll)
			doneAllLabels = true
		}
	}

	const labelsFirstLetterToUppercase = () => {
		const allLabels = document.querySelectorAll('.offert__jsLabel')
		allLabels.forEach((item) => {
			let name = item.textContent.charAt(0).toUpperCase() + item.textContent.slice(1)
			item.textContent = name
		})
	}

	const provinceLabel = document.querySelector('.jsLabelList')

	const createDataSet = () => {
		const labels = document.querySelectorAll('.jsLabel')
		labels.forEach((item) => {
			const name = item.textContent
			item.dataset.provinces = name
		})
	}

	const provinceLabels = (item) => {
		checkAlllabels()
		const provinces = item
		provinces.toString()
		const labelElement = document.createElement('li')
		labelElement.classList.add('splide__slide', 'offert__nav', 'jsLabel', 'offert__jsLabel')
		labelElement.innerHTML = provinces
		provinceLabel.append(labelElement)
		labelsFirstLetterToUppercase()
		createDataSet()
	}

	const getProvinces = () => {
		fetch(`${URL}/active-provinces`, {
			method: 'GET',
			headers: {
				'X-CSRFToken': csrfTokenCookie,
			},
		}).then((response) => {
			if (response.ok) {
				response.json().then((data) => {
					// console.log(data);
					if (provinceLabel) {
						provinceLabel.innerHTML = ''
						for (let i = 0; i < data.length; i++) {
							let provincesElements = data[i].province_name
							if (provincesElements) {
								provinceLabels(provincesElements)
								getProvinceCourses(provincesElements)
								allOfferElements(provincesElements)
								// console.log(provincesElements);
							}
						}
					}
				})
			}
		})
	}

	const createCourseCard = (course) => {
		chooseProvinceLabels(course)
		const addAppendOfferCard = document.querySelector('.jsAddOffer')

		course.forEach((cour) => {
			const element = document.createElement('ul')
			element.classList.add('splide__slide')
			let imageURL = ''
			if (cour.carousel_image && cour.carousel_image.image_medium_thumb !== null) {
				imageURL = cour.carousel_image.image_medium_thumb
			} else {
				imageURL = `https://placehold.co/398x200?text=${cour.title}`
			}
			element.innerHTML = `
         <div class="offert-card">
            <div class="offert-card__image">
               <img width="400" height="200" loading="lazy" src="${imageURL}"
                  alt="" />
            </div>
            <div class="offert-card__body">
               <p class="offert-card__body-overline">${cour.province}</p>
               <h2 class="offert-card__body-title">${cour.title}</h2>
               <div class="offert-card__body-information">
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M12 12C12.55 12 13.021 11.804 13.413 11.412C13.805 11.02 14.0007 10.5493 14 10C14 9.45 13.804 8.979 13.412 8.587C13.02 8.195 12.5493 7.99933 12 8C11.45 8 10.979 8.196 10.587 8.588C10.195 8.98 9.99933 9.45067 10 10C10 10.55 10.196 11.021 10.588 11.413C10.98 11.805 11.4507 12.0007 12 12ZM12 22C9.31667 19.7167 7.31267 17.596 5.988 15.638C4.66333 13.68 4.00067 11.8673 4 10.2C4 7.7 4.80433 5.70833 6.413 4.225C8.02167 2.74167 9.884 2 12 2C14.1167 2 15.9793 2.74167 17.588 4.225C19.1967 5.70833 20.0007 7.7 20 10.2C20 11.8667 19.3373 13.6793 18.012 15.638C16.6867 17.5967 14.6827 19.7173 12 22Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.city}</p>
                  </div>
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M14.55 16.55L15.95 15.125L13 12.175V8H11V13L14.55 16.55ZM11 6H13V4H11V6ZM18 13H20V11H18V13ZM11 20H13V18H11V20ZM4 13H6V11H4V13ZM12 22C10.6167 22 9.31667 21.7373 8.1 21.212C6.88333 20.6867 5.825 19.9743 4.925 19.075C4.025 18.175 3.31267 17.1167 2.788 15.9C2.26333 14.6833 2.00067 13.3833 2 12C2 10.6167 2.26267 9.31667 2.788 8.1C3.31333 6.88333 4.02567 5.825 4.925 4.925C5.825 4.025 6.88333 3.31267 8.1 2.788C9.31667 2.26333 10.6167 2.00067 12 2C13.3833 2 14.6833 2.26267 15.9 2.788C17.1167 3.31333 18.175 4.02567 19.075 4.925C19.975 5.825 20.6877 6.88333 21.213 8.1C21.7383 9.31667 22.0007 10.6167 22 12C22 13.3833 21.7373 14.6833 21.212 15.9C20.6867 17.1167 19.9743 18.175 19.075 19.075C18.175 19.975 17.1167 20.6877 15.9 21.213C14.6833 21.7383 13.3833 22.0007 12 22Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.date}</p>
                  </div>
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M12 14C11.7167 14 11.479 13.904 11.287 13.712C11.095 13.52 10.9993 13.2827 11 13C11 12.7167 11.096 12.479 11.288 12.287C11.48 12.095 11.7173 11.9993 12 12C12.2833 12 12.521 12.096 12.713 12.288C12.905 12.48 13.0007 12.7173 13 13C13 13.2833 12.904 13.521 12.712 13.713C12.52 13.905 12.2827 14.0007 12 14ZM8 14C7.71667 14 7.479 13.904 7.287 13.712C7.095 13.52 6.99933 13.2827 7 13C7 12.7167 7.096 12.479 7.288 12.287C7.48 12.095 7.71733 11.9993 8 12C8.28333 12 8.521 12.096 8.713 12.288C8.905 12.48 9.00067 12.7173 9 13C9 13.2833 8.904 13.521 8.712 13.713C8.52 13.905 8.28267 14.0007 8 14ZM16 14C15.7167 14 15.479 13.904 15.287 13.712C15.095 13.52 14.9993 13.2827 15 13C15 12.7167 15.096 12.479 15.288 12.287C15.48 12.095 15.7173 11.9993 16 12C16.2833 12 16.521 12.096 16.713 12.288C16.905 12.48 17.0007 12.7173 17 13C17 13.2833 16.904 13.521 16.712 13.713C16.52 13.905 16.2827 14.0007 16 14ZM12 18C11.7167 18 11.479 17.904 11.287 17.712C11.095 17.52 10.9993 17.2827 11 17C11 16.7167 11.096 16.479 11.288 16.287C11.48 16.095 11.7173 15.9993 12 16C12.2833 16 12.521 16.096 12.713 16.288C12.905 16.48 13.0007 16.7173 13 17C13 17.2833 12.904 17.521 12.712 17.713C12.52 17.905 12.2827 18.0007 12 18ZM8 18C7.71667 18 7.479 17.904 7.287 17.712C7.095 17.52 6.99933 17.2827 7 17C7 16.7167 7.096 16.479 7.288 16.287C7.48 16.095 7.71733 15.9993 8 16C8.28333 16 8.521 16.096 8.713 16.288C8.905 16.48 9.00067 16.7173 9 17C9 17.2833 8.904 17.521 8.712 17.713C8.52 17.905 8.28267 18.0007 8 18ZM16 18C15.7167 18 15.479 17.904 15.287 17.712C15.095 17.52 14.9993 17.2827 15 17C15 16.7167 15.096 16.479 15.288 16.287C15.48 16.095 15.7173 15.9993 16 16C16.2833 16 16.521 16.096 16.713 16.288C16.905 16.48 17.0007 16.7173 17 17C17 17.2833 16.904 17.521 16.712 17.713C16.52 17.905 16.2827 18.0007 16 18ZM5 22C4.45 22 3.979 21.804 3.587 21.412C3.195 21.02 2.99934 20.5493 3 20V6C3 5.45 3.196 4.979 3.588 4.587C3.98 4.195 4.45067 3.99933 5 4H6V2H8V4H16V2H18V4H19C19.55 4 20.021 4.196 20.413 4.588C20.805 4.98 21.0007 5.45067 21 6V20C21 20.55 20.804 21.021 20.412 21.413C20.02 21.805 19.5493 22.0007 19 22H5ZM5 20H19V10H5V20Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.time_start}</p>
                  </div>
               </div>
               <p class="offert-card__body-description">
                  ${cour.short_description}
               </p>
               <div class="offert-card__body-action">
                  <a href="${URL}/course/${cour.province_slug}/${cour.slug}" class="btn btn--primary">Poznaj ofertę
                     <span class="btn__arrow">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                           xmlns="http://www.w3.org/2000/svg">
                           <path d="M12 20L10.575 18.6L16.175 13H4V11H16.175L10.575 5.4L12 4L20 12L12 20Z"
                              fill="white" />
                        </svg>
                     </span>
                  </a>
                  <p class="offert-card__body-price">${cour.price}zł</p>
               </div>
            </div>
         </div>`

			addAppendOfferCard.classList.add('splide__list')
			addAppendOfferCard.append(element)
			// allOfferElements()
		})
	}

	const provinceLowercase = (province) => {
		let provinveLowercase = province.charAt(0).toLowerCase() + province.slice(1)
		return provinveLowercase
	}

	const createChosenCoursesCards = (course) => {
		const mainOfferCard = document.querySelector('.jsAddOffer')
		mainOfferCard.innerHTML = ''
		course.forEach((cour) => {
			const element = document.createElement('ul')
			element.classList.add('splide__slide')
			let imageURL = ''
			if (cour.carousel_image && cour.carousel_image.image_medium_thumb !== null) {
				imageURL = cour.carousel_image.image_medium_thumb
			} else {
				imageURL = `https://placehold.co/398x200?text=${cour.title}`
			}
			element.innerHTML = `
         <div class="offert-card">
            <div class="offert-card__image">
               <img width="400" height="200" loading="lazy" src="${imageURL}"
                  alt="" />
            </div>
            <div class="offert-card__body">
               <p class="offert-card__body-overline">${cour.province}</p>
               <h2 class="offert-card__body-title">${cour.title}</h2>
               <div class="offert-card__body-information">
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M12 12C12.55 12 13.021 11.804 13.413 11.412C13.805 11.02 14.0007 10.5493 14 10C14 9.45 13.804 8.979 13.412 8.587C13.02 8.195 12.5493 7.99933 12 8C11.45 8 10.979 8.196 10.587 8.588C10.195 8.98 9.99933 9.45067 10 10C10 10.55 10.196 11.021 10.588 11.413C10.98 11.805 11.4507 12.0007 12 12ZM12 22C9.31667 19.7167 7.31267 17.596 5.988 15.638C4.66333 13.68 4.00067 11.8673 4 10.2C4 7.7 4.80433 5.70833 6.413 4.225C8.02167 2.74167 9.884 2 12 2C14.1167 2 15.9793 2.74167 17.588 4.225C19.1967 5.70833 20.0007 7.7 20 10.2C20 11.8667 19.3373 13.6793 18.012 15.638C16.6867 17.5967 14.6827 19.7173 12 22Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.city}</p>
                  </div>
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M14.55 16.55L15.95 15.125L13 12.175V8H11V13L14.55 16.55ZM11 6H13V4H11V6ZM18 13H20V11H18V13ZM11 20H13V18H11V20ZM4 13H6V11H4V13ZM12 22C10.6167 22 9.31667 21.7373 8.1 21.212C6.88333 20.6867 5.825 19.9743 4.925 19.075C4.025 18.175 3.31267 17.1167 2.788 15.9C2.26333 14.6833 2.00067 13.3833 2 12C2 10.6167 2.26267 9.31667 2.788 8.1C3.31333 6.88333 4.02567 5.825 4.925 4.925C5.825 4.025 6.88333 3.31267 8.1 2.788C9.31667 2.26333 10.6167 2.00067 12 2C13.3833 2 14.6833 2.26267 15.9 2.788C17.1167 3.31333 18.175 4.02567 19.075 4.925C19.975 5.825 20.6877 6.88333 21.213 8.1C21.7383 9.31667 22.0007 10.6167 22 12C22 13.3833 21.7373 14.6833 21.212 15.9C20.6867 17.1167 19.9743 18.175 19.075 19.075C18.175 19.975 17.1167 20.6877 15.9 21.213C14.6833 21.7383 13.3833 22.0007 12 22Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.date}</p>
                  </div>
                  <div class="offert-card__information-box">
                     <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                           d="M12 14C11.7167 14 11.479 13.904 11.287 13.712C11.095 13.52 10.9993 13.2827 11 13C11 12.7167 11.096 12.479 11.288 12.287C11.48 12.095 11.7173 11.9993 12 12C12.2833 12 12.521 12.096 12.713 12.288C12.905 12.48 13.0007 12.7173 13 13C13 13.2833 12.904 13.521 12.712 13.713C12.52 13.905 12.2827 14.0007 12 14ZM8 14C7.71667 14 7.479 13.904 7.287 13.712C7.095 13.52 6.99933 13.2827 7 13C7 12.7167 7.096 12.479 7.288 12.287C7.48 12.095 7.71733 11.9993 8 12C8.28333 12 8.521 12.096 8.713 12.288C8.905 12.48 9.00067 12.7173 9 13C9 13.2833 8.904 13.521 8.712 13.713C8.52 13.905 8.28267 14.0007 8 14ZM16 14C15.7167 14 15.479 13.904 15.287 13.712C15.095 13.52 14.9993 13.2827 15 13C15 12.7167 15.096 12.479 15.288 12.287C15.48 12.095 15.7173 11.9993 16 12C16.2833 12 16.521 12.096 16.713 12.288C16.905 12.48 17.0007 12.7173 17 13C17 13.2833 16.904 13.521 16.712 13.713C16.52 13.905 16.2827 14.0007 16 14ZM12 18C11.7167 18 11.479 17.904 11.287 17.712C11.095 17.52 10.9993 17.2827 11 17C11 16.7167 11.096 16.479 11.288 16.287C11.48 16.095 11.7173 15.9993 12 16C12.2833 16 12.521 16.096 12.713 16.288C12.905 16.48 13.0007 16.7173 13 17C13 17.2833 12.904 17.521 12.712 17.713C12.52 17.905 12.2827 18.0007 12 18ZM8 18C7.71667 18 7.479 17.904 7.287 17.712C7.095 17.52 6.99933 17.2827 7 17C7 16.7167 7.096 16.479 7.288 16.287C7.48 16.095 7.71733 15.9993 8 16C8.28333 16 8.521 16.096 8.713 16.288C8.905 16.48 9.00067 16.7173 9 17C9 17.2833 8.904 17.521 8.712 17.713C8.52 17.905 8.28267 18.0007 8 18ZM16 18C15.7167 18 15.479 17.904 15.287 17.712C15.095 17.52 14.9993 17.2827 15 17C15 16.7167 15.096 16.479 15.288 16.287C15.48 16.095 15.7173 15.9993 16 16C16.2833 16 16.521 16.096 16.713 16.288C16.905 16.48 17.0007 16.7173 17 17C17 17.2833 16.904 17.521 16.712 17.713C16.52 17.905 16.2827 18.0007 16 18ZM5 22C4.45 22 3.979 21.804 3.587 21.412C3.195 21.02 2.99934 20.5493 3 20V6C3 5.45 3.196 4.979 3.588 4.587C3.98 4.195 4.45067 3.99933 5 4H6V2H8V4H16V2H18V4H19C19.55 4 20.021 4.196 20.413 4.588C20.805 4.98 21.0007 5.45067 21 6V20C21 20.55 20.804 21.021 20.412 21.413C20.02 21.805 19.5493 22.0007 19 22H5ZM5 20H19V10H5V20Z"
                           fill="#FF7700" />
                     </svg>
                     <p class="information-card__information-name">${cour.time_start}</p>
                  </div>
               </div>
               <p class="offert-card__body-description">
                  ${cour.short_description}
               </p>
               <div class="offert-card__body-action">
                  <a href="${URL}/course/${cour.province_slug}/${cour.slug}" class="btn btn--primary">Poznaj ofertę
                     <span class="btn__arrow">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                           xmlns="http://www.w3.org/2000/svg">
                           <path d="M12 20L10.575 18.6L16.175 13H4V11H16.175L10.575 5.4L12 4L20 12L12 20Z"
                              fill="white" />
                        </svg>
                     </span>
                  </a>
                  <p class="offert-card__body-price">${cour.price}zł</p>
               </div>
            </div>
         </div>`
			mainOfferCard.classList.add('splide__list')
			mainOfferCard.append(element)
		})
	}

	const chooseProvinceLabels = (course) => {
		// console.log(course);
		if (course) {
			provinceLabel.addEventListener('click', (e) => {
				if (e.target.classList.contains('splide__slide')) {
					let province = e.target.getAttribute('data-provinces')
					province = provinceLowercase(province)
					// console.log(province);
					course.forEach((item) => {
						let prov = item.province_slug

						const getCourses = (data) => {
							fetch(`${URL}/courses-by-province/${data}`, {
								method: 'GET',
								headers: {
									'X-CSRFToken': csrfTokenCookie,
								},
							}).then((response) => {
								if (response.ok) {
									response.json().then((data) => {
										if (data) {
											clearCarouselPagination()
											createChosenCoursesCards(data)
										}
										activeProvinceSlider()
									})
								}
							})
						}
						if (province === prov) {
							// console.log(prov)
							getCourses(prov)
						}
					})
				}
			})
		}
	}

	const getProvinceCourses = (data) => {
		fetch(`${URL}/courses-by-province/${data}?limit=12`, {
			method: 'GET',
			headers: {
				'X-CSRFToken': csrfTokenCookie,
			},
		}).then((response) => {
			if (response.ok) {
				response.json().then((data) => {
					// console.log(data)
					if (data) {
						clearCarouselPagination()
						createCourseCard(data)
						// console.log(data)
					}
					activeProvinceSlider()
				})
			}
		})
	}

	const activeProvinceSlider = () => {
		const offert = document.querySelector('.offert-carousel')
		if (offert) {
			const offertCarousel = new Splide(offert, {
				// type: 'loop',
				// perPage: 2,
				fixedWidth: '440',
				gap: 36,
				arrows: false,
				pagination: true,
			})
			offertCarousel.mount()
		}
	}

	getProvinces()
	activeProvinceSlider()
	chooseProvinceLabels()
	const clearCarouselPagination = (params) => {
		const pagination = document.querySelector('.offert').querySelector('.splide__pagination')
		if (pagination) {
			pagination.innerHTML = ''
		}
	}

	const labels = document.querySelector('.jsLabelList')

	const deleteActiveLabelBgc = () => {
		const activeLabel = document.querySelectorAll('.jsLabel')
		activeLabel.forEach((item) => {
			item.classList.remove('jsSplideLabelBgc')
		})
	}

	// pobiera wszystkie kursy, ta funkcja jest obecnie nieużywana

	const allActiveCourses = () => {
		fetch(`${URL}/active-courses/`, {
			method: 'GET',
			headers: {
				'X-CSRFToken': csrfTokenCookie,
			},
		}).then((response) => {
			if (response.ok) {
				response.json().then((data) => {
					// console.log(data)
					if (data) {
						// clearCarouselPagination()
						// createCourseCard(data)
						// console.log(data);
					}
					// activeProvinceSlider()
				})
			}
		})
	}

	allActiveCourses()

	// pobiera wszystkie kursy, ta funkcja jest obecnie nieużywana - KONIEC

	if (labels) {
		labels.addEventListener('click', (e) => {
			if (e.target.classList.contains('jsLabel')) {
				deleteActiveLabelBgc()
				e.target.classList.add('jsSplideLabelBgc')
			}
		})
	}

	// getProvinceCourses()

	// STRIPE

	// const checkoutForm = document.querySelector('.jsCreateCheckout')
	// if (checkoutForm) {
	// 	// console.log(checkoutForm)
	// 	checkoutForm.addEventListener('submit', (e) => {
	// 		e.preventDefault()
	// 		// WALIDAJCA
	// 		// Utworzenie obiektu z danymi fromData
	// 		const buyerName = checkoutForm.querySelector('#buyerName').value
	// 		const buyerSurname = checkoutForm.querySelector('#buyerSurname').value
	// 		const buerEmail = checkoutForm.querySelector('#buyerEmail').value
	// 		const buyerPhone = checkoutForm.querySelector('#buyerPhone').value
	// 		const cartCourses = document.querySelectorAll('.jsCartCourse')

	// 		const formData = {
	// 			name: buyerName,
	// 			surname: buyerSurname,
	// 			email: buerEmail,
	// 			phone: buyerPhone,
	// 			purchased_courses: [],
	// 		}
	// 		cartCourses.forEach((course) => {
	// 			const courseId = course.dataset.courseId
	// 			const courseQuantity = course.dataset.courseQuantity

	// 			const participantData = course.querySelectorAll('.jsParticipantData')
	// 			const participants = []

	// 			participantData.forEach((participant) => {
	// 				const participantName = participant.querySelector('#participantName').value
	// 				const participantSurname = participant.querySelector('#participantSurname').value
	// 				const participantEmail = participant.querySelector('#participantEmail').value
	// 				const participantPhone = participant.querySelector('#participantPhone').value

	// 				const newParticipant = {
	// 					name: participantName,
	// 					surname: participantSurname,
	// 					email: participantEmail,
	// 					phone: participantPhone,
	// 				}

	// 				participants.push(newParticipant)
	// 			})

	// 			const newCourse = {
	// 				course: courseId,
	// 				quantity: parseInt(courseQuantity, 10),
	// 				participants: participants,
	// 			}
	// 			formData.purchased_courses.push(newCourse)
	// 		})

	// 		var stripe = Stripe(
	// 			'pk_test_51O2IdAKiNvxN6rGZ2WJiJgSld6y86ePUmmhIHe3CjSSLTYYuJ7M16NFgByVzI5RhXJ1xdAjtQqeodyJ8NeFulAri00klwONrWu'
	// 		)

	// 		fetch('/create-checkout-session', {
	// 			method: 'POST',
	// 			headers: {
	// 				'Content-Type': 'application/json',
	// 				'X-CSRFToken': csrfTokenCookie,
	// 			},
	// 			body: JSON.stringify(formData),
	// 		})
	// 			.then(function (response) {
	// 				return response.json()
	// 			})
	// 			.then(function (session) {
	// 				return stripe.redirectToCheckout({ sessionId: session.id })
	// 			})
	// 			.then(function (result) {
	// 				if (result.error) {
	// 					console.error(result.error.message)
	// 				}
	// 			})
	// 	})
	// }

	// burger button ------------------------------------------
	const burgerBtn = document.querySelector('.jsBurger')
	const burgerBtnClose = document.querySelector('.jsCloseBurger')
	const btnBgc = document.querySelector('.nav__left-burgerBox')
	const mobileMenu = document.querySelector('.mobile-menu__first')
	const submenuMobileMenuBackBTN = document.querySelector('.mobile-menu__second-backBTN')
	const sumenuTrainingsBTN = document.querySelector('.jsTrainingsBTN')
	const showedTrainigsSubmenu = document.querySelector('.jsShowTrainingsSubmenu')
	const openBurgerBtn = () => {
		burgerBtn.classList.add('nav__account-burger-displaynone')
		burgerBtnClose.classList.add('nav__account-btnclose-displayblock')
		document.body.classList.add('no-scroll')
		btnBgc.classList.add('nav__left-burgerBox--bgcActive')
		mobileMenu.classList.add('mobile-menu__first--active')
		overlay.classList.add('overlay--active')
		overlay.addEventListener('click', () => {
			closeBurgerBtn()
		})
	}
	const closeBurgerBtn = () => {
		burgerBtn.classList.remove('nav__account-burger-displaynone')
		burgerBtnClose.classList.remove('nav__account-btnclose-displayblock')
		document.body.classList.remove('no-scroll')
		btnBgc.classList.remove('nav__left-burgerBox--bgcActive')
		mobileMenu.classList.remove('mobile-menu__first--active')
		overlay.classList.remove('overlay--active')
		showedTrainigsSubmenu.classList.remove('mobile-menu__second--active')
	}

	if (burgerBtn) {
		burgerBtn.addEventListener('click', () => {
			if (!burgerBtn.classList.contains('nav__account-burger-displaynone')) {
				openBurgerBtn()
			}
		})
	}

	if (burgerBtnClose) {
		burgerBtnClose.addEventListener('click', () => {
			closeBurgerBtn()
		})
	}

	if (sumenuTrainingsBTN) {
		sumenuTrainingsBTN.addEventListener('click', () => {
			showedTrainigsSubmenu.classList.add('mobile-menu__second--active')
		})
		submenuMobileMenuBackBTN.addEventListener('click', () => {
			showedTrainigsSubmenu.classList.remove('mobile-menu__second--active')
		})
	}

	// SORTOWANKO
	const sortSelectElement = document.querySelector('.jsSort')
	if (sortSelectElement) {
		sortSelectElement.addEventListener('change', () => {
			const selectedValue = sortSelectElement.value
			window.location.href = `${URL}${selectedValue}`
		})
	}

	// zaokrąglenie ceny całkowitej w order details
	const orderDetailsPrice = document.querySelector('.jsOrderDetailsPrice')
	if (orderDetailsPrice) {
		const price = orderDetailsPrice.textContent
		const floatPrice = parseFloat(price)
		floatPrice.toFixed(2)
		orderDetailsPrice.innerHTML = floatPrice
	}

	// zmniejszanie font-size ceny przy cenie większej niż 10 znaków
	// const priceInCard = document.querySelectorAll('.offert-card__body-price')
	// if (priceInCard) {
	// 	priceInCard.forEach((item) => {
	// 		let allPrices = item.textContent
	// 		let lenghtPrices = allPrices.length
	// 		if (lenghtPrices > 10) {
	// 			priceInCard.style.fontSize = '1.3rem'
	// 		}
	// 	})
	// }

	// THE END
})
